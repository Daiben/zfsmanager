index_title=ZFS Manager
index_root=The root directory is $1.
index_version=alpha 0.1.5
index_return=pool list
snapshot_return=snapshot list
zfs_return=file system list

#general use
destination=Destination:
filename=Filename:
continue=Continue
create=Create
destroy=Destroy

#tasks
tasks=Tasks
differences=Differences:
differences_desc=Show differences in
rename=Rename:
rename_desc=Rename
clone=Clone:
clone_desc: Clone
destroy=Destroy:
destroy_pool=Destroy pool
destroy_filesystem=Destroy filesystem
destroy_snap=Destroy snapshot
snapshot=Snapshot:
snapshot_desc=Create new snapshot based on filesystem:
send=Send:
send_desc=Send
rollback=Rollback:
rollback_desc=Rollback

status_title=Zpool Status

vdev_title=Manage Virtual Device
property_title=Manage Property
select_title=Select a device for new vdev
replace_title=Replace a device
diff_title=Snapshot Differences

about_title=About ZFS Manager

cmd_title=Issuing Command
cmd_dscpt=Command Description:
cmd_issue=Commands to be issued:
cmd_results=Results from commands:
cmd_with=with command...
cmd_setzfs=Attempting to set zfs property
cmd_setpool=Attempting to set pool property
cmd_snapshot=Attempting to create snapshot
cmd_send=Send snapshot
cmd_gzip=to gzip file
cmd_createzfs=Attempting to create filesystem
cmd_clone=Attempting to clone
cmd_rename=Attempting to rename
cmd_createzpool=Attempting to create pool
cmd_vdev=Attempting to 
cmd_promote=Attempting to promote
cmd_scrub=Attempting to scrub pool
cmd_upgrade=Attempting to upgrade pool
cmd_export=Attempting to export pool
cmd_import=Attempting to import pool
cmd_zfsact=Attempting to 
cmd_destroy=Attempting to destroy
cmd_affect=This action will affect the following:
cmd_warning=Warning, this action will result in data loss, do you really want to continue?
cmd_understand=I understand
cmd_checkbox=checkbox must be selected
cmd_multisnap=Attempting to destroy multiple snapshots...
cmd_success=Success!
cmd_error=error:

snapshot_title=Snapshot 
snapshot_create=Create Snapshot
snapshot_new=Select filesystem for snapshot

zpool_upgrade_msg=This will enable all available features, many of which cannot be disabled again. See zpool-features in man pages for more information. *Avoid using if pool needs to retain backwards compatibilty.*

promote_cmd=zfs promote <u>clone-filesystem</u>
promote_desc=Promotes a clone file system to no longer be dependent on its "origin" snapshot. This makes it possible to destroy the file system that the clone was created from. The clone parent-child dependency relationship is reversed, so that the origin file system becomes a clone of the specified file system. <br /><br /> The snapshot that was cloned, and any snapshots previous to this snapshot, are now owned by the promoted clone. The space they use moves from the origin file system to the promoted clone, so enough space must be available to accommodate these snapshots. No new space is consumed by this operation, but the space accounting is adjusted. The promoted clone must not have any conflicting snapshot names of its own. The rename subcommand can be used to rename any conflicting snapshots.

clone_cmd=zfs clone [-p] [-o <u>property</u>=<u>value</u>] ... snapshot <u>filesystem</u>|<u>volume</u>
clone_desc=Creates a clone of the given snapshot. See the "Clones" section for details. The target dataset can be located anywhere in the ZFS hierarchy, and is created as the same type as the original.<br /><br />-p<br />Creates all the non-existing parent datasets. Datasets created in this manner are automatically mounted according to the mountpoint property inherited from their parent. If the target  filesystem  or  volume  already exists, the operation completes successfully.<br /><br />-o <u>property</u>=<u>value</u><br /> Sets the specified property; see zfs create for details.

export_cmd=zpool export [-a] [-f] <u>pool</u> ...
export_desc=Exports the given pools from the system. All devices are marked as exported, but are still considered in use by other subsystems. The devices can be moved between systems (even those of different endianness) and imported as long as a sufficient number of devices are present.<br /><br />Before exporting the pool, all datasets within the pool are unmounted. A pool can not be exported if it has a shared spare that is currently being used.<br /><br />For pools to be portable, you must give the zpool command whole disks, not just partitions, so that ZFS can label the disks with portable EFI labels. Otherwise, disk drivers on platforms of different endianness will not recognize the disks.<br /><br />-a    Exports all pools imported on the system.<br /><br />-f    Forcefully unmount all datasets, using the "unmount -f" command. <br /><br />This command will forcefully export the pool even if it has a shared spare that is currently being used. This may lead to potential data corruption.<br /><br />

#zfs property descriptions
prop_aclinherit=Controls how ACL entries are inherited when files and directories are created. A file system with an "aclinherit" property of "discard" does not inherit any ACL entries. A file system with an "aclinherit" property value of "noallow" only inherits inheritable ACL entries that specify "deny" permissions. The property value "restricted" (the default) removes the "write_acl" and "write_owner" permissions when the ACL entry is inherited. A file system with an "aclinherit" property value of "passthrough" inherits all inheritable ACL entries without any modifications made to the ACL entries when they are inherited. A file system with an "aclinherit" property value of "passthrough-x" has the same meaning as "passthrough", except that the owner@, group@, and everyone@ ACEs inherit the execute permission only if the file creation mode also requests the execute bit. When the property value is set to "passthrough," files are created with a mode determined by the inheritable ACEs. If no inheritable ACEs exist that affect the mode, then the mode is set in accordance to the requested mode from the application.
prop_acltype=Controls whether ACLs are enabled and if so what type of ACL to use. When a file system has the acltype property set to noacl (the default) then ACLs are disabled. Setting the acltype property to posixacl indicates Posix ACLs should be used. Posix ACLs are specific to Linux and are not functional on other platforms. Posix ACLs are stored as an xattr and therefore will not overwrite any existing ZFS/NFSv4 ACLs which may be set. Currently only posixacls are supported on Linux.<br /><br />To obtain the best performance when setting posixacl users are strongly encouraged to set the xattr=sa property. This will result in the Posix ACL being stored more efficiently on disk. But as a consequence of this all new xattrs will only be accessable from ZFS implementations which support the xattr=sa property. See the xattr property for more details.
prop_atime=Controls whether the access time for files is updated when they are read. Turning this property off avoids producing write traffic when reading files and can result in significant performance gains, though it might confuse mailers and other similar utilities. The default value is "on".
prop_available=The amount of space available to the dataset and all its children, assuming that there is no other activity in the pool. Because space is shared within a pool, availability can be limited by any number of factors, including physical pool size, quotas, reservations, or other datasets within the pool. This property can also be referred to by its shortened column name, "avail".
prop_canmount=If this property is set to "off", the file system cannot be mounted, and is ignored by "zfs mount -a". Setting this property to "off" is similar to setting the "mountpoint" property to "none", except that the dataset still has a normal "mountpoint" property, which can be inherited. Setting this property to "off" allows datasets to be used solely as a mechanism to inherit properties. One example of setting canmount=off is to have two datasets with the same mountpoint, so that the children of both datasets	appear in the same directory, but might have different inherited characteristics.<br /><br />When the "noauto" option is set, a dataset can only be mounted and unmounted explicitly. The dataset is not mounted automatically when the dataset is created or imported, nor is it mounted by the "zfs mount -a" command or unmounted by the "zfs unmount -a" command.<br /><br />This property is not inherited.
prop_casesensitivity=Indicates whether the file name matching algorithm used by the file system should be case-sensitive, case-insensitive, or allow a combination of both styles of matching. The default value for the casesensitivity property is sensitive. Traditionally, UNIX and POSIX file systems have case-sensitive file names.<br /><br />The mixed value for the casesensitivity property indicates that the file system can support requests for both case-sensitive and case-insensitive matching behavior. Currently, case-insensitive matching behavior on a file system that supports mixed behavior is limited to the Solaris CIFS server product. For more information about the mixed value behavior, see the Solaris ZFS Administration Guide.
prop_checksum=Controls the checksum used to verify data integrity. The default value is "on", which automatically selects an appropriate algorithm (currently, fletcher2, but this may change in future releases). The value "off" disables integrity checking on user data. Disabling checksums is NOT a recommended practice.
prop_com.sun:auto-snapshot=zfs-auto-snapshot automatically creates, rotates, and destroys snapshots for all your ZFS datasets, and is compatible with both zfsonlinux and zfs-fuse. 
prop_compression=Controls the compression algorithm used for this dataset. The "lzjb" compression algorithm is optimized for performance while providing decent data compression. Setting compression to "on" uses the "lzjb" compression algorithm. The "gzip" compression algorithm uses the same compression as the gzip(1) command. You can specify the "gzip" level by using the value "gzip-N" where N is an integer from 1 (fastest) to 9 (best compression ratio). Currently, "gzip" is equivalent to "gzip-6" (which is also the default for gzip(1)). This property can also be referred to by its shortened column name "compress".

prop_quota=Limits the amount of space a dataset and its descendents can consume. This property enforces a hard limit on the  amount  of  space used. This includes all space consumed by descendents, including file systems and snapshots. Setting a quota on a descendent of a dataset that already has a quota does not override the ancestor's quota, but rather imposes an additional limit. <br /><br />Quotas cannot be set on volumes, as the "volsize" property acts as an implicit quota.

#zpool property descriptions
prop_allocated=Amount of storage space within the pool that has been physically allocated.
prop_altroot=Alternate root directory. If set, this directory is prepended to any mount points within the pool. This can be used when examining an unknown pool where the mount points cannot be trusted, or in an alternate boot environment, where the typical paths are not valid. altroot is not a persistent property. It is valid only while the system is up. Setting altroot defaults to using cachefile=none, though this may be overridden using an explicit setting.
prop_ashift=Pool sector size exponent, to the power of 2 (internally referred to as "ashift"). I/O operations will be aligned to the specified size boundaries. Additionally, the minimum (disk) write size will be set to the specified size, so this represents a space vs. performance trade-off. The typical case for setting this property is when performance is important and the underlying disks use 4KiB sectors but report 512B sectors to the OS (for compatibility reasons); in that case, set ashift=12 (which is 1<<12 = 4096). For optimal performance, the pool sector size should be greater than or equal to the sector size of the underlying disks. Since the property cannot be changed after pool creation, if in a given pool, you ever want to use drives that report 4KiB sectors, you must set ashift=12 at pool creation time.
prop_autoexpand=Controls automatic pool expansion when the underlying LUN is grown. If set to "on", the pool will be resized according to the size of the expanded device. If the device is part of a mirror or raidz then all devices within that mirror/raidz group must be expanded before the new space is made available to the pool. The default behavior is "off". This property can also be referred to by its shortened column name, expand.
prop_autoreplace=Controls automatic device replacement. If set to "off", device replacement must be initiated by the administrator by using the "zpool replace" command. If set to "on", any new device, found in the same physical location as a device that previously belonged to the pool, is automatically formatted and replaced. The default behavior is "off". This property can also be referred to by its shortened column name, "replace".
prop_bootfs=Identifies the default bootable dataset for the root pool. This property is expected to be set mainly by the installation and upgrade programs.
prop_cachefile=Controls the location of where the pool configuration is cached. Discovering all pools on system startup requires a cached copy of the configuration data that is stored on the root file system. All pools in this cache are automatically imported when the system boots. Some environments, such as install and clustering, need to cache this information in a different location so that pools are not automatically imported. Setting this property caches the pool configuration in a different location that can later be imported with "zpool import -c". Setting it to the special value "none" creates a temporary pool that is never cached, and the special value '' (empty string) uses the default location.
prop_capacity=Percentage of pool space used. This property can also be referred to by its shortened column name, "cap".
prop_comment=A text string consisting of printable ASCII characters that will be stored such that it is available even if the pool becomes faulted. An administrator can provide additional information about a pool using this property.
